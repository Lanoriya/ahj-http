(()=>{"use strict";class t{constructor(){this.baseUrl="http://localhost:7070/"}async list(t){try{const e=await fetch(this.baseUrl+"?method=allTickets");t(await e.json())}catch(t){console.error("Ошибка при получении списка тикетов:",t)}}async get(t,e){try{const n=await fetch(this.baseUrl+`?method=ticketById&id=${t}`);e(await n.json())}catch(t){console.error("Ошибка при получении тикета:",t)}}async create(t,e){try{const n=await fetch(this.baseUrl+"?method=createTicket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});e(await n.json())}catch(t){console.error("Ошибка при создании тикета:",t)}}async update(t,e,n){try{const i=await fetch(this.baseUrl+`?method=updateById&id=${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});n(await i.json())}catch(t){console.error("Ошибка при обновлении тикета:",t)}}async delete(t,e){try{const n=await fetch(this.baseUrl+`?method=deleteById&id=${t}`,{method:"GET"});n.ok?e():console.error("Ошибка при удалении тикета:",n.statusText)}catch(t){console.error("Ошибка при удалении тикета:",t)}}}class e{constructor(){this.container=document.getElementById("ticket-list-container"),this.ticketService=new t}renderTicket(t){const e=document.createElement("tr");e.innerHTML=`\n      <td>\n        <button class="toggle-status-button" id="ticket-btn" data-id="${t.id}" data-status="${t.status}">\n          ${t.status?"✓":"ㅤ"}\n        </button>\n      </td>\n      <td class="ticket-name">${t.name}</td>\n      <td>${new Date(t.created).toLocaleString()}</td>\n      <td>\n        <button class="update-button" id="ticket-btn" data-id="${t.id}">✎</button>\n        <button class="delete-button" id="ticket-btn" data-id="${t.id}">☓</button>\n      </td>\n    `;e.querySelector(".delete-button").addEventListener("click",(e=>{e.stopPropagation(),document.getElementById("ticket-form")||this.confirmDeleteTicket(t.id)}));e.querySelector(".update-button").addEventListener("click",(e=>{e.stopPropagation(),document.getElementById("ticket-form")||this.openEditModal(t.id,t.name,t.description)}));const n=e.querySelector(".toggle-status-button");return n.addEventListener("click",(()=>{const e=!("true"===n.dataset.status);n.dataset.status=e.toString(),n.textContent="✓",this.updateTicket(t.id,{status:e})})),e.addEventListener("click",(()=>{this.toggleTicketDescription(e,t.description)})),e}toggleTicketDescription(t,e){const n=t.nextElementSibling;if(n&&n.classList.contains("ticket-description"))n.remove();else{const n=document.createElement("tr");n.classList.add("ticket-description");const i=document.createElement("td");i.setAttribute("colspan","2"),i.textContent=e,n.appendChild(i),t.after(n)}}renderTickets(t){this.container.innerHTML="";const e=document.createElement("table");e.innerHTML="\n      <tbody></tbody>\n    ";const n=e.querySelector("tbody");t.forEach((t=>{const e=this.renderTicket(t);n.appendChild(e)})),this.container.appendChild(e)}confirmDeleteTicket(t){const e=document.createElement("div");e.classList.add("modal"),e.id="ticket-form",e.innerHTML='\n      <div class="modal-content">\n        <h5 class="form-title">Удалить тикет</h5>\n        <p class="form-confirm-p">Вы уверены, что хотите удалить тикет? Это действие необратимо.</p>\n        <div class="form-btns">\n          <button class="modal-cancel form-btn">Отмена</button>\n          <button class="modal-confirm form-btn">Ok</button>\n        </div>\n      </div>\n    ';e.querySelector(".modal-confirm").addEventListener("click",(()=>{this.deleteTicket(t),e.remove()}));e.querySelector(".modal-cancel").addEventListener("click",(()=>{e.remove()})),document.body.appendChild(e)}openEditModal(t,e,n){const i=document.createElement("div");i.classList.add("modal"),i.id="ticket-form",i.innerHTML=`\n      <div class="modal-content">\n        <h5 class="form-title">Редактировать тикет</h5>\n        <div class="form-type">\n          <div class="form-type-block">\n            <label for="name">Краткое описание</label>\n            <textarea type="text" id="edit-name" name="name">${e}</textarea>\n          </div>\n          <div class="form-type-block">\n            <label for="description">Подробное описание</label>\n            <textarea id="edit-description" name="description">${n}</textarea>\n          </div>\n          <div class="form-btns">\n            <button class="modal-cancel form-btn">Отмена</button>\n            <button class="modal-confirm form-btn">Ok</button>\n          </div>\n        </div>\n      </div>\n    `;i.querySelector(".modal-confirm").addEventListener("click",(()=>{const e={name:i.querySelector("#edit-name").value,description:i.querySelector("#edit-description").value};this.updateTicket(t,e),i.remove()}));i.querySelector(".modal-cancel").addEventListener("click",(()=>{i.remove()})),document.body.appendChild(i)}deleteTicket(t){this.ticketService.delete(t,(()=>{this.ticketService.list((t=>{this.renderTickets(t)}))}))}updateTicket(t,e){this.ticketService.update(t,e,(()=>{this.ticketService.list((t=>{this.renderTickets(t)}))}))}}class n{constructor(t){this.container=document.getElementById("ticket-list-container"),this.onSubmit=t}renderForm(){const t=document.createElement("form");t.id="ticket-form",t.innerHTML='\n      <h5 class="form-title">Добавить тикет</h5>\n      <div class="form-type">\n        <div class="form-type-block">\n          <label for="name">Краткое описание</label>\n          <textarea type="text" id="name" name="name"></textarea>\n        </div>\n        <div class="form-type-block">\n          <label for="description">Подробное описание</label>\n          <textarea id="description" name="description"></textarea>\n        </div>\n        <div class="form-btns">\n          <button class="form-btn" id="form-close">Отмена</button>\n          <button class="form-btn" type="submit">Ok</button>\n        </div>\n      </div>\n    ',t.addEventListener("submit",(t=>{t.preventDefault();const e=new FormData(t.target),n={name:e.get("name"),description:e.get("description"),status:!1,created:Date.now()};this.onSubmit(n)})),this.container.appendChild(t);t.querySelector("#form-close").addEventListener("click",(()=>{t.remove()}))}}const i=document.getElementById("root");new class{constructor(i){this.container=document.getElementById(i),this.ticketService=new t,this.ticketView=new e("ticket-list"),this.ticketForm=new n(this.handleFormSubmit.bind(this))}async init(){this.ticketService.list((t=>{this.ticketView.renderTickets(t)}));document.getElementById("add-ticket-button").addEventListener("click",(()=>{document.getElementById("ticket-form")||this.ticketForm.renderForm()}))}async handleFormSubmit(t){this.ticketService.create(t,(t=>{this.ticketService.list((t=>{this.ticketView.renderTickets(t)}))}))}async handleDeleteTicket(t){this.ticketView.deleteTicket(t)}async handleUpdateTicket(t,e){this.ticketView.updateTicket(t,e)}async handleToggleStatus(t,e){const n={status:e};this.ticketView.updateTicket(t,n)}}(i).init()})();